<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
        <!ENTITY lt "<">
        <!ENTITY gt ">">
        <!ENTITY amp "&">
]>

<book>
  <title>Sarien Hacker's Guide</title>
  <titleabbrev>Hacker's Guide</titleabbrev>

  <bookinfo>
    <authorgroup>
      <author>
        <firstname>Claudio</firstname>
        <surname>Matsuoka</surname>
        <authorblurb><para>
        </para></authorblurb>
      </author>
    </authorgroup>

    <abstract><para>
    </para></abstract>

    <releaseinfo>
      $Id$
    </releaseinfo>
  </bookinfo>

<chapter id="intro">
<title>Introduction</title>

<sect1 id="intro-base">
<title>Basic concepts</title>
<para>
</para>
</sect1>

<sect1 id="intro-portability">
<title>Portability</title>
<para>
  Sarien is currently very portable. It is currently known to run in
  many platforms, summarized in the following table:

  <informaltable>
    <tgroup cols="8">
      <thead>
        <row>
          <entry>Platform</entry>
          <entry>Author/Maintainer</entry>
          <entry>Compiler</entry>
          <entry>Graphic driver</entry>
          <entry>Sound driver</entry>
          <entry>Windowed</entry>
          <entry>Fullscreen</entry>
          <entry>Sound</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>MS-DOS</entry>
          <entry>Stuart</entry>
          <entry>Watcom</entry>
          <entry>Raw</entry>
          <entry>Dummy</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>MS-DOS</entry>
          <entry>Stuart</entry>
          <entry>DJGPP</entry>
          <entry>Allegro</entry>
          <entry>Allegro</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Linux/IA32</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>OSS</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Linux</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>SDL</entry>
          <entry>SDL</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Linux</entry>
          <entry>XoXus/Claudio</entry>
          <entry>gcc</entry>
          <entry>SVGAlib</entry>
          <entry>Dummy</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>FreeBSD</entry>
          <entry>Joep</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>FreeBSD</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Open/NetBSD</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>BSD</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Solaris/SPARC</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>Solaris</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>IRIX</entry>
          <entry>Ari Heikkinen</entry>
          <entry>MIPSpro</entry>
          <entry>X11</entry>
          <entry>sgi</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>BeOS</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>SDL</entry>
          <entry>SDL</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>OS/2 + XFree86</entry>
          <entry>?</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>Dummy</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>QNX</entry>
          <entry>Jeremy Penner</entry>
          <entry>?</entry>
          <entry>Photon</entry>
          <entry>Dummy</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Win32</entry>
          <entry>Felipe/Igor</entry>
          <entry>Visual C++</entry>
          <entry>DIB</entry>
          <entry>Win32</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</para><para>
  Other ports such as Amiga, Atari and Acorn are not yet integrated to
  the main development tree.
</para><para>
  To achieve maximum portability, the following guidelies should be
  observed when writing code for Sarien:
</para>
</sect1>

<sect1 id="intro-build">
<title>Build system</title>
<para>
  The build system used in Sarien tries to be flexible and allow
  out-of-the-box building in all supported system architectures.
  Different compilers and cross-compilers are supported:

  <itemizedlist>
    <listitem><para>
      Sarien can be built using the standard <application/GNU Autoconf/
      <filename/configure/ script in systems running a POSIX shell and
      <application/GNU Make/. The configuration script produces a suitable
      <filename/Rules/ file which is included by all Makefiles in the
      system.
    </para></listitem>
    <listitem><para>
      Systems with <application/GNU Make/ but not supported by
      the configuration script or can use one of the pre-configured
      <filename/Rules/ file available in the <filename>rulesets/</filename>
      directory.
    </para></listitem>
    <listitem><para>
      Cross-compiling to platforms such as Win32 or BeOS using
      <application/gcc/ is supported using the supplied configuration
      script with appropriate values in the <parameter/CC/ and
      <parameter/RANLIB/ enviroment variables and setting the
      <parameter/--host/ command-line parameter.
    </para></listitem>
    <listitem><para>
      Pre-configured rulesets are available to cross-compile to other
      platforms such as PalmOS using the GNU tools and cross-compiler.
    </para></listitem>
    <listitem><para>
      Compiler-specific Makefiles are available for use with
      <application/Watcom C/ and <application/DJGPP/. These are named
      <filename/Makefile.wat/ and <filename/Makefile.dj/.
    </para></listitem>
    <listitem><para>
      Project and other support files are available for use with
      <application/Microsoft Visual C++ 6.0/ in the
      <filename>VC++6.0/</filename> directory.
    </para></listitem>
  </itemizedlist>
</para><para>
  Extra functionality provided by the standard Makefiles for
  <application/GNU make/ include the <parameter/dist/ target to produce
  a distribution package.

</para>
</sect1>

<sect1 id="intro-style">
<title>Coding style</title>
<para>
</para>
</sect1>

<sect1 id="intro-organization">
<title>Organization</title>
<para>
</para>
</sect1>


<chapter id="arch">
<title>Architectural overview</title>

<sect1 id="arch-system">
<title>Interpreter subsystems</title>
<para>
</para>
</sect1>

<sect1 id="arch-data">
<title>Data structures</title>
<para>
</para>
</sect1>

<sect1 id="arch-resource">
<title>Resource management</title>
<para>
</para>
</sect1>

<sect1 id="arch-console">
<title>The interpreter console</title>
<para>
</para>
</sect1>

</chapter>

<chapter id="input">
<title>Input subsystem</title>

<sect1 id="input-keyboard">
<title>Keyboard input handling</title>
<para>
  The keystroke is routed to different subsystems according to the value
  of <parameter/game.input-mode/. This variable can assume one of the
  following values:

  <variablelist>
    <varlistentry>
      <term><parameter/INPUT_NORMAL/</term>
      <listitem><para>
        In this mode regular keystrokes are routed to the input parser.
        Directional keys are handled to move ego, and special key events
        are tested for controller actions.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter/INPUT_GETSTRING/</term>
      <listitem><para>
        This mode is used when <function/get.string/ is issued, and
        key events are routed to the input string. Directional keys are
        handled to move ego, and special key events are tested for
        controller actions.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter/INPUT_MENU/</term>
      <listitem><para>
        In this mode only <keycap>ENTER</keycap>, <keycap>ESC</keycap> and
        directional keys are handled and used for menu navigation. Controller
        tests are disabled.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter/INPUT_NONE/</term>
      <listitem><para>
        When mode is set to <parameter/INPUT_NONE/, <keycap>ENTER</keycap>
        and <keycap>ESC</keycap> are handled for message boxes, and special
        key events are tested for controller actions. 
      </para></listitem>
    </varlistentry>
  </variablelist>

</para><para>
  The interpreter architecture doesn't allow key handling to be implemented
  in a interrupt handler for portability reasons. Instead, keyboard events
  are polled in the main loop and retrieved from a queue prepared by the
  architecture-specific driver. Currently message box, the menu system and
  <function/get.string/ have their own loops, ideally we should have a
  single key event handler in the main loop checking the input mode
  dispatching events according to the input mode.
</para>
</sect1>

<sect1 id="input-mouse">
<title>Mouse</title>
<para>
</para>
</sect1>

<sect1 id="input-grafitti">
<title>Grafitti</title>
<para>
</para>
</sect1>

</chapter>

<chapter id="gfx">
<title>Graphic subsystem</title>

<sect1 id="gfx-lowlevel">
<title>Lowlevel graphic subsystem</title>
<para>
</para>
</sect1>

<sect1 id="gfx-hilevel">
<title>High-level graphic subsystem</title>
<para>
</para>
</sect1>

<sect1 id="gfx-fonts">
<title>Fonts</title>
<para>
</para>
</sect1>

</chapter>


<chapter id="sound">
<title>Sound subsystem</title>

<sect1 id="sound-play">
<title>Sound playing</title>
<para>
</para>
</sect1>

<sect1 id="sound-iigs">
<title>PCM and MIDI sound</title>
<para>
</para>
</sect1>

</chapter>


<chapter id="driver">
<title>Drivers</title>

<sect1 id="driver-intro">
<title>The need of abstraction layers</title>
<para>
</para>
</sect1>

<sect1 id="driver-graphics">
<title>Graphic drivers</title>
<para>
</para>
</sect1>

<sect1 id="driver-sound">
<title>Sound drivers</title>
<para>
</para>
</sect1>

<sect1 id="driver-fs">
<title>Filesystem access</title>
<para>
</para>
</sect1>

</chapter>

</book>
