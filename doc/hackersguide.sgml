<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
        <!ENTITY lt "<">
        <!ENTITY gt ">">
        <!ENTITY amp "&">
]>

<book>
  <title>Sarien Hacker's Guide</title>
  <titleabbrev>Hacker's Guide</titleabbrev>

  <bookinfo>
    <authorgroup>
      <author>
        <firstname>Claudio</firstname>
        <surname>Matsuoka</surname>
        <authorblurb><para>
        </para></authorblurb>
      </author>
    </authorgroup>

    <abstract><para>
      This guide documents the internal aspects of the Sarien AGI
      interpreter, providing comprehensive guidelines for new developers
      and a rich reference material for future maintenance. The system
      architecture, subsystem details and design decisions are explained,
      and the API and requisites for porting the interpreter to new
      platforms are discussed. 
    </para></abstract>

    <releaseinfo>
      $Id$
    </releaseinfo>

    <copyright>
      <year>2001</year>
      <holder>The Sarien Development Team</holder>
    </copyright>

    <legalnotice><para>
    </para></legalnotice>

  </bookinfo>

<chapter id="intro">
<title>Introduction</title>

<sect1 id="intro-base">
<title>Sarien basics</title>
<para>
  <ulink url="http://sarien.sourceforge.net/">Sarien</ulink> is a
  portable implementation of the Sierra On-Line Adventure Game
  Interpreter (AGI) written in C language by Stuart George and others,
  based on research made in the late 1990's by a group of enthusiasts
  including Peter Kelly and Lance Ewing. It runs in a variety of
  enviroments including the X Window System and MS-Windows. The
  interpreter runs in a single thread, and in some platforms an optional
  sound thread can generate PCM audio via real-time software synthesis.

</para><para>
  Sarien exceeds the original AGI interpreter in many aspects, and its
  goal is to correctly implement the complete set of AGI instructions
  and be able to execute AGI scripts written for Sierra's interpreter.
  There is, however, no official specification of the AGI system
  published by Sierra or its designers. Instead, all the information
  currently available about AGI internals is result of investigative
  work performed by third parties. As a consequence, many script runtime
  errors exist and are caused not by design or implementation errors,
  but by incomplete or incorrect specifications. Produce a document
  containing the full AGI specifications is still a work in progress.

</para><para>
  For those not yet familiar with the AGI system, a study of the
  currently available documentation is recommended. In a few words,
  it manages a number of graphic, textual and musical resources using
  a script language (called the ``Logic'' language) which is compiled
  to bytecode and executed by the interpreter. To work in Sarien
  development, using an AGI development suite is highly recommended.
  AGI Studio is the standard development tool, and is currently
  available for Windows (Peter Kelly's <ulink
  url="http://members.ozemail.com.au/~ptrkelly/agi/agistudio.html">original
  implementation</ulink>) and UNIX systems (Helen Zommer's
  <ulink url="http://samhain.cc.huji.ac.il/agi/">Qt-based
  implementation</ulink>). Both tools are licensed under the
  <ulink url="http://www.fsf.org/copyleft/gpl.html">GNU General
  Public License</ulink>.

</para><para>
  As mentioned above, the most likely source of script execution errors 
  is the lack of complete specifications. Problems arising from partial
  or incorrect implementation of instructions can range from screen
  corruption to in-game errors or even interpreter crashes. The current
  implementation of the sprite management system, for instance, was based
  on trial-and-error; it works in most cases but produces heavy screen
  corruption in a few situations. The list of known problems is not
  small, and can be verified in the Sarien project bug tracker at
  Sourceforge.
</para>
</sect1>

<sect1 id="intro-portability">
<title>Portability</title>
<para>
  Sarien is very portable, and runs in a variety of platforms including
  UNIX and UNIX-like systems (Linux, BSD, Solaris), BeOS, QNX, MS-DOS,
  Microsoft Windows and others. The supported platforms are summarized in
  the following table<footnote><para>Sarien was successfully ported to
  other platforms such as Amiga, Atari and Acorn but these ports are not
  yet integrated to the main development tree.</para></footnote>:
</para><para>

  <table id="table-ports">
    <title>Available Sarien ports and the features they support
    <tgroup cols="8">
      <thead>
        <row>
          <entry>Platform</entry>
          <entry>Author/Maintainer</entry>
          <entry>Compiler</entry>
          <entry>Graphic driver</entry>
          <entry>Sound driver</entry>
          <entry>Windowed</entry>
          <entry>Fullscreen</entry>
          <entry>Sound</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>MS-DOS</entry>
          <entry>Stuart</entry>
          <entry>Watcom</entry>
          <entry>Raw VGA</entry>
          <entry>Dummy</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>MS-DOS</entry>
          <entry>Stuart</entry>
          <entry>DJGPP</entry>
          <entry>Allegro</entry>
          <entry>Allegro</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>MS-DOS</entry>
          <entry>Claudio</entry>
          <entry>Turbo C++</entry>
          <entry>Raw VGA</entry>
          <entry>Dummy</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Linux/IA32</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>OSS</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Linux</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>SDL</entry>
          <entry>SDL</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Linux</entry>
          <entry>XoXus/Claudio</entry>
          <entry>gcc</entry>
          <entry>SVGAlib</entry>
          <entry>Dummy</entry>
          <entry>No</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>FreeBSD</entry>
          <entry>Joep</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>FreeBSD</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Open/NetBSD</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>BSD</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Solaris/SPARC</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>Solaris</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>IRIX</entry>
          <entry>Ari Heikkinen</entry>
          <entry>MIPSpro</entry>
          <entry>X11</entry>
          <entry>sgi</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>BeOS</entry>
          <entry>Claudio</entry>
          <entry>gcc</entry>
          <entry>SDL</entry>
          <entry>SDL</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>OS/2 + XFree86</entry>
          <entry>?</entry>
          <entry>gcc</entry>
          <entry>X11</entry>
          <entry>Dummy</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>QNX</entry>
          <entry>Jeremy Penner</entry>
          <entry>gcc</entry>
          <entry>Photon</entry>
          <entry>ALSA</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Win32</entry>
          <entry>Felipe/Igor</entry>
          <entry>Visual C++</entry>
          <entry>DIB</entry>
          <entry>Win32</entry>
          <entry>Yes</entry>
          <entry>No</entry>
          <entry>Yes</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

</para><para>
  To achieve maximum portability, the following guidelies should be
  observed when writing code for Sarien:

  <itemizedlist>
    <listitem><para>
      Never assume specific sizes for <function/int/, <function/short/ and
      <function/long/ data types (it is safe, however to assume that the
      <function/int/ type has at least 16 bits). When a specific data
      type size is needed, use <function/SINT8/, <function/SINT16/ and
      <function/SINT32/ for signed integers and <function/UINT8/,
      <function/UINT16/ and <function/UINT32/ for unsigned integers.
    </para></listitem>

    <listitem><para>
      Use the <function/char/ type for strings to avoid excessive typecasting.
      <function/char/ can be safely assumed as having 8 bits. Don't assume
      <function/char/ as signed or unsigned, it can vary between platforms.
    </para></listitem>

    <listitem><para>
      Use <function/int/ for integers which not require a specific data
      type size. It can be assumed as a signed value with at least 16 bits. 
      Using <function/int/ instead of a specific sized integer data type
      allows the compiler to generate optimized and properly aligned code
      for that platform.
    </para></listitem>

    <listitem><para>
      Multibyte data types can be either big or little-endian. To read
      values from resource files, use the support functions
      <function/hilo_getword()/, <function/hilo_getdword()/,
      <function/lohi_getword()/ and <function/lohi_getdword()/. For
      other situations, the <varname role="env"/WORDS_BIGENDIAN/ macro will be
      defined if the host architecture is big-endian.
    </para></listitem>

    <listitem><para>
      Avoid using compiler-specific features such as pragmas, nonstandard
      data types (e.g. <function/long long/) or nonstandard preprocessor
      directives (e.g. variable argument macros) in core files. If needed,
      place them in the header files.
    </para></listitem>

    <listitem><para>
      Use standard C <function>/* */</function> comments instead of
      C++ <function>//</function> comments.
    </para></listitem>

    <listitem><para>
      Avoid adding platform-specific code in <filename>src/core/</filename>.
      Whenever possible, write portable code or move the platform-specific
      code to a driver. Use conditional compiling only if absolutely necessary.
    </para></listitem>

    <listitem><para>
      Certain POSIX-defined functions and header files are not available
      in many platforms, these include <function/usleep()/, <function/glob()/,
      <function/gettimeofday()/ among others. 
    </para></listitem>

    <listitem><para>
      Don't use foating-point code. It can result in a serious performance
      hit in some platforms.
    </para></listitem>

  </itemizedlist>
</para>
</sect1>

<sect1 id="intro-build">
<title>Build system</title>
<para>
  The build system used in Sarien tries to be flexible and allow
  out-of-the-box building in all supported system architectures.
  Different compilers and cross-compilers are supported:

  <itemizedlist>
    <listitem><para>
      Sarien can be built using the standard <application/GNU Autoconf/
      <filename/configure/ script in systems running a POSIX shell and
      <application/GNU Make/. The configuration script produces a suitable
      <filename/Rules/ file which is included by all Makefiles in the
      system. Extra functionality provided by the standard Makefiles for
      <application/GNU make/ include the <parameter/dist/ target to produce
      a distribution package.
    </para></listitem>
    <listitem><para>
      Systems with <application/GNU Make/ but not supported by
      the configuration script or can use one of the pre-configured
      <filename/Rules/ file available in the <filename>rulesets/</filename>
      directory.
    </para></listitem>
    <listitem><para>
      Cross-compiling to platforms such as Win32 or BeOS using
      <application/gcc/ is supported using the supplied configuration
      script with appropriate values in the <envar/CC/ and <envar/RANLIB/
      enviroment variables and setting the <parameter/--host/ command-line
      parameter.
    </para></listitem>
    <listitem><para>
      Pre-configured rulesets are available to cross-compile to other
      platforms such as PalmOS using the GNU tools and cross-compiler.
    </para></listitem>
    <listitem><para>
      Compiler-specific Makefiles are available for use with
      <application/Watcom C/ and <application/DJGPP/. These are named
      <filename/Makefile.wat/ and <filename/Makefile.dj/.
    </para></listitem>
    <listitem><para>
      Project and other support files are available for use with
      <application/Microsoft Visual C++ 6.0/ in the
      <filename>VC++6.0/</filename> directory.
    </para></listitem>
  </itemizedlist>
</para><para>
  In the source code tree, source code goes into the <filename>src/</filename> 
  directory. Architecture-independent source files are placed under
  <filename>src/core/</filename>, while graphic and sound drivers and
  filesystem access functions have a separate set of files for each
  supported platform. These files go under their own directories in
  <filename>src/graphics/</filename>, <filename>src/sound</filename> and
  <filename>src/fileglob/</filename>.

</para><para>
  After building, executable binaries can be found in <filename>bin/</filename>.
  In each subdirectory, object files produced by the compiler are archived
  in <filename>lib/libagi.a</filename><footnote><para>If you're in a POSIX
  environment. The actual library file name varies with the platform
  where the build takes place.</para></footnote>, which is later linked to
  the application main file. Currently <filename>src/core/main.c</filename>
  is the main file for <filename>bin/sarien</filename> and 
  <filename>src/core/picview.c</filename> is the main file for
  <filename>bin/picview</filename>.

</para><para>
  Depending on enviromental needs or constraints, different binaries
  can be built via conditional compiling. The following macros are
  used to enable or disable features at build time:
  
  <variablelist>
    <varlistentry>
      <term><varname role="macro"/_TRACE/</term>
      <listitem><para>
        Enable debug messages to be written to the standard output.
        The trace messages are ANSI-colored accoding to message priority
        and show the file name<footnote><para>Tracking specific messages
        is easier with the colored output. If your terminal does not support
        ANSI colors, change the <varname role="macro"/_D_INFO/,
        <varname role="macro"/_D_WARN/ and <varname role="macro"/_D_CRIT/
        in <filename>include/sarien.h</filename>
        to appropriate values.</para></footnote>, line number and name of
        the function where the macro <function/_D()/ is inserted. 
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/USE_CONSOLE/</term>
      <listitem><para>
        Enable the system console. If not defined, it will reduce memory
        footprint and some code complexity. Recommended for systems with
        severe memory restrictions such as PalmOS.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/FAKE_PALMOS/</term>
      <listitem><para>
        Set the output window geometry to 160x160 pixels and select the
        4x6 font for system messages, to simulate the graphic output of a
        PalmOS device. The console and AGDS support are automatically
        disabled when this macro is set. 160x160 output works only with
        windowed graphics output.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/DISABLE_COPYPROTECTION/</term>
      <listitem><para>
        Patch some known AGI scripts to bypass annoying or time-consuming
        sequences during the development of the interpreter.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/AGDS_SUPPORT/</term>
      <listitem><para>
        Add a Cyrillic font and minor changes in the interpreter to
        support Russian AGDS games such as Groza.
      </para></listitem>
    </varlistentry>

  </variablelist>

</para>
</sect1>

<sect1 id="intro-style">
<title>Coding style</title>
<para>
  There is no strict enforcement of a coding style to follow, but a few
  conventions should be followed to make code maintenance easier. Good
  coding styles for Sarien include the K&amp;R style and the Linux kernel 
  style. Don't use the GNU coding style: it's ugly, hard to read and wastes
  too much vertical space.
</para><para>

  So here are the conventions to follow. (They summarize a number of
  style elements already in use in the source code, so just reading
  the existing codebase and using a similar style should give the same
  results.)

  <itemizedlist>
    <listitem><para>
       Indent with tabs, regardless of the tab size you use (8 characters
       is the standard tab size, and therefore it's the recommended size).
       Try to make lines fit in 80 columns, using 8 space tabs.
    </para></listitem>
    <listitem><para>
       Don't use Hungarian notation in variable names.
       Use lower case variable names, with underscores to separate words
       if necessary. Avoid excessively long variable names. Try to use
       canonical variable names for counters (<varname/i/, <varname/j/,
       <varname/k/), cartesian coordinates (<varname/x/, <varname/y/)
       and temporary storage (<varname/tmp/).
    </para></listitem>
    <listitem><para>
       Use uppercase names for macros, except when it mimics a function.
       If a macro contains more than one statement, protect it using
       <literal/do { ... } while (0)/ constructs.
    </para></listitem>
    <listitem><para>
       Avoid excessive typedefing. In many cases it's convenient to know
       that a certain data type is a structure or an union and not a
       scalar. It's also helpful to know the indirection levels we're
       working with.
    </para></listitem>
    <listitem><para>
       Add comments to the code, especially in confusing or likely to be
       misunderstood passages. Due to its trial-and-error nature, many
       functions perform non-obvious or hackish tasks. Code clean-ups
       are frequent and tend to eliminate obscure constructions, and
       commenting hacks helps this process. Sometimes a kludge can't be
       avoided, so be sure to document it.
    </para></listitem>
    <listitem><para>
       This should be needless to say: avoid intentional obfuscation
       at any cost.
    </para></listitem>
    <listitem><para>
       Avoid project-wide global variables. If they're really global, put
       it in <function/struct agi_game/, or if they're local to the module
       declare them as static. In a similar way, declare functions local
       to a module as static.
    </para></listitem>
  </itemizedlist>
  
</para>
</sect1>

<sect1 id="intro-organization">
<title>Organization</title>
<para>
  The SHG is a work in progress and is expected to evolve with Sarien
  development. Many sections are still incomplete and others are to
  be added. The basic outline of the document, however, is already
  defined and is organized as follows: <xref linkend="intro"> introduces
  the project to newcomer developers and gives general coding and
  portability recommendations; <xref linkend="arch"> gives notions of
  how the interpreter works and some of its design and implementation
  decisions; <xref linkend="input"> shows how user input is collected
  and processed using different input methods; <xref linkend="gfx">
  discusses graphics and sprite management; <xref linkend="sound">
  documents the sound subsystem; and <xref linkend="driver"> presents
  the driver API and gives detaled information on how to port Sarien
  to other platforms.
</para>
</sect1>


<chapter id="arch">
<title>Architectural overview</title>

<sect1 id="arch-system">
<title>Interpreter subsystems</title>
<para>
  Sarien can be roughly divided in a number of subsystems, each one
  dealing with a specific aspect of running a set of AGI scripts.

  <itemizedlist>
    <listitem><para>
      The interpreter core is responsible for managing AGI resources
      and execute the Logic scripts. It must interact with the other
      subsystems to perform several actions such as sound playing,
      graphic updates and read user input. The rest of this chapter
      discusses the Sarien interpreter core, its internal organization
      and the services it provides to the rest of the system.
    </para></listitem>

    <listitem><para>
      The user input subsystem collects keyboard, mouse or other input
      device events from a lowlevel driver and makes them available
      to the interpreter core. Currently only keyboard input is supported;
      details on the input subsystem are given in <xref linkend="input">.
    </para></listitem>

    <listitem><para>
      The graphics subsystem work on an internal frame and ancillary
      buffers to render the images requested by the interpreter core,
      delivering them to the lowlevel driver for display exposure.
      The ancillary buffers include a 4-bit Z-buffer (priority) and
      the console layer, that should be made transparent to the
      framebuffer-accessing functions. It is also responsible for
      blitting sprites and rendering character fonts on the framebuffer.
      <xref linkend="gfx"> gives more information on Sarien's graphics
      subsystems.
    </para></listitem>

    <listitem><para>
      The sound subsystem runs on its own thread and uses real-time
      software synthesis to produce a PCM stream from AGI resources.
      In single-threaded environments it can be called as an interrupt
      handler (assigned and managed by the platform-specifc low-level
      driver).
    </para></listitem>

    <listitem><para>
      Low-level drivers provide the platform-specific code necessary in
      the several Sarien ports. As shown in <xref linkend="table-ports">
      there are low-level drivers for graphic (X11, Win32, SDL, etc.) and
      sound (OSS, SDL, Solaris, etc.) access. Non-obvious drivers are
      the input device drivers and the filesystem access drivers. Unlike
      graphics and sound, which can be combined to match the host platform
      (e.g. X11 graphics driver with OSS or Solaris sound driver), the
      input driver is tied to the graphics driver. The "console driver"
      term is more appropriate, but graphics driver will be used to avoid
      confusion with the system console. The driver API and implementation
      details are examined in <xref linkend="driver">.
      
    </para></listitem>
  </itemizedlist>

</para><para>
  Among the aforementioned subsystems, only the interpreter core is
  AGI-aware, and deals directly with AGI resources. Similarily, only
  the lowlevel drivers know details about the underlying hardware.
  The other subsystems sit in the middle and work with
  platform-independent raw (i.e. non-AGI) data. <footnote><para>That
  doesn't necessarily mean that this middle layer will always use data
  formats that are different or non-AGI in nature, but that the internal
  organization adopted by AGI becomes meaningless to these subsystems.
  The sound subsystem, for instance, reads sequencing information from
  data in AGI format, and the graphics subsystem has its Z-buffer with
  the same format as the AGI priority buffer, but the ``cel'', ``loop''
  or ``view table'' concepts are irrelevant.</para></footnote>.
</para>
</sect1>

<sect1 id="arch-mainloop">
<title>The main loop</title>
<para>
  The interpreter main loop runs a complete AGI cycle in each iteration.
  Actions performed in the main loop include keyboard polling and key
  event processing, internal timer updating, frame rate control, AGI cycle
  processing and sprite updating. <xref linkend="fig-mainloop"> outlines
  the process: actions from key polling to sprite blitting are performed
  in sequence in the main loop; actions in the dashed box belog to the
  "main cycle" that is also called from blocking and timed message boxes, 
  string input and step debugging. The reason for doing this is the
  cycle granularity of the main loop; string input or blocking message
  boxes can be executed in the middle of the logic script, and the
  execution returns to the main loop only after the end of logic
  script 0. Having a main loop with instruction granularity is possible,
  but it would add complexity and overhead to the interpreter.
</para>

  <figure id="fig-mainloop" float="1">
    <title>Interpreter main loop</title>
    <graphic fileref="images/hg/main_loop.eps" format="eps">
  </figure>

<para>
  The AGI cycle runs in ``spriteless mode''. All sprites are removed before
  running logic 0 and updated when logic 0 finishes. All graphic operations
  are performed on the AGI 160x160 buffers, actual image blitting (to the
  output device) happens only at the end of the main loop. 
</para>

</sect1>

<sect1 id="arch-data">
<title>Data structures</title>
<para>
  AGI-related global variables, accessible from any part of the code, are
  fields of <function/struct agi_game/, defined in <filename/agi.h/ as
  follows:

  <programlisting>
struct agi_game {
	char name[8];		/* lead in id (eg, goldrush GR */
	char id[8];		/* game id */	
	char dir[MAX_PATH];	/* game dir (for v3 games, eg GR&lt;dir&gt;) */

	/* game flags and variables */
	UINT8 flags[MAX_FLAGS];	/* 256 flags */
	UINT8 vars[MAX_VARS];	/* 256 variables */

	/* internal variables */
	int horizon;		/* horizon marker */
	int line_status;	/* line num to put status on */
	int line_user_input;	/* line to put user input on */
	int line_min_print;	/* num lines to print on */
	int new_room_num;
	int keypress;
#define INPUT_NORMAL	0x01
#define INPUT_GETSTRING	0x02
#define INPUT_MENU	0x03
#define INPUT_NONE	0x04
	int input_mode;

	/* internal flags */
	int ego_in_new_room;	/* new room flag */
	int control_mode;	/* who's in control */
	int quit_prog_now;	/* quit now */
	int status_line;	/* status line on/off */
	int clock_enabled;	/* clock is on/off */
	int exit_all_logics;
#define ID_AGDS		0x00000001
#define ID_AMIGA	0x00000002
	int game_flags;		/* game flags!! (important) */

	UINT32 msg_box_ticks;	/* timed message box tick counter */

	/* directory entries for resources */
	struct agi_dir dir_logic[MAX_DIRS];
	struct agi_dir dir_pic[MAX_DIRS];
	struct agi_dir dir_view[MAX_DIRS];
	struct agi_dir dir_sound[MAX_DIRS];

	/* player command line */
	struct agi_word ego_words[MAX_WORDS];
	int num_ego_words;
	int num_objects;

	struct agi_event events[MAX_DIRS];	/* keyboard events */
	char strings[MAX_WORDS1][MAX_WORDS2];	/* strings */
};
  </programlisting>

</para><para>
  Some of the members of <function/struct agi_game/ are redundant and
  should be removed in a near future. (For example, the ``internal flags''
  might be bitmapped into <varname/game_flags/).
</para>
</sect1>

<sect1 id="arch-func">
<title>Support functions</title>
<para>
</para>
</sect1>

<sect1 id="arch-resource">
<title>Resource management</title>
<para>
</para>
</sect1>

<sect1 id="arch-console">
<title>The interpreter console</title>
<para>
  The interpreter console can be invoked at any time during gameplay,
  and allows the user to examine or change the value of AGI flags and
  variables, issue AGI commands, obtain the interpreter status and
  set interpreter options.
</para>

<sect2 id="arch-console-addcmd">
<title>Adding new commands to the console</title>
<para>
  To add a new command to the console, enter the command name, a
  brief description line and the name of the function that implements
  the command in function <function/console_init()/ in <filename/console.c/.
  Per convention, console command function names start with <function/ccmd_/.
</para>
<para>
  Example:

  <programlisting>
static void ccmd_crc ()
{
        report ("0x%05x\n", game.crc);
}

(...)

int console_init ()
{
	.
	.
	.
        console_cmd ("crc",    "Show AGI game CRC", ccmd_crc);
	.
	.
	.
}
  </programlisting>
</para>

</sect2>
</sect1>

</chapter>

<chapter id="input">
<title>Input subsystem</title>

<sect1 id="input-keyboard">
<title>Keyboard input handling</title>
<para>
  The keystroke is routed to different subsystems according to the value
  of <varname role="agivar"/game.input-mode/, as shown in
  <xref linkend="fig-keyhandling">.
  This variable can assume one of the following values, and the possible
  transitions between input modes are depicted in <xref linkend="fig-input">.

  <variablelist>
    <varlistentry>
      <term><varname role="macro"/INPUT_NORMAL/</term>
      <listitem><para>
        In this mode regular keystrokes are routed to the input parser.
        Directional keys are handled to move ego, and special key events
        are tested for controller actions.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/INPUT_GETSTRING/</term>
      <listitem><para>
        This mode is used when <function/get.string/ is issued, and
        key events are routed to the input string. Directional keys are
        handled to move ego, and special key events are tested for
        controller actions.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/INPUT_MENU/</term>
      <listitem><para>
        In this mode only <keycap>ENTER</keycap>, <keycap>ESC</keycap> and
        directional keys are handled and used for menu navigation. Controller
        tests are disabled.
      </para></listitem>
    </varlistentry>

    <varlistentry>
      <term><varname role="macro"/INPUT_NONE/</term>
      <listitem><para>
        When mode is set to <parameter/INPUT_NONE/, only controller events
	are tested.
      </para></listitem>
    </varlistentry>
  </variablelist>

  <figure id="fig-keyhandling" float="1">
    <title>Key event routing</title>
    <graphic fileref="images/hg/key_handling.eps" format="eps">
  </figure>

  <figure id="fig-input" float="1">
    <title>Interpreter input modes</title>
    <graphic fileref="images/hg/input_mode.eps" format="eps">
  </figure>

</para><para>
  The interpreter architecture doesn't allow key handling to be implemented
  in a interrupt handler for portability reasons. Instead, keyboard events
  are polled in the main loop and retrieved from a queue prepared by the
  architecture-specific driver. The key event is retrieved from the queue
  in a single point and dispatched to different handlers according to
  the the input mode described above. Notable exceptions to this rule
  are blocking and timed message box key handling (pressing <keycap/ENTER/
  or <keycap/ESC/ dismisses box) and string input: in these cases execution
  is trapped inside an internal loop<footnote><para>Sarien can't perform
  such checks in the main loop because these events can happen in the
  middle of a logic script execution, and the main loop is called once
  per interpreter cycle.</para></footnote>. The console thread must be
  called from all closed loops of the interpreter.
  
</para><para>
  Between the keyboard polling and key event dispatcher is the console
  key handler. The console key handler is completely transparent to the
  rest of the system: when the console is active all key events are
  handled by its own handler before reaching the dispatcher.

  <figure id="fig-keymenu" float="1">
    <title>Key routing in menu mode</title>
    <graphic fileref="images/hg/key_menu.eps" format="eps">
  </figure>

  <xref linkend="fig-keymenu"> shows key event routing when the menu
  is active. In this case, the main loop is ``short-circuited'' so timers
  and script execution are paused. The same happens when the console
  is active.

</para><para>
  Key events are stored in the <varname/V_key/ variable for AGI use.
  Controller events require ASCII and scan codes and are stored in the
  special variable <varname/game.keypress/.
  
</para>
</sect1>

<sect1 id="input-mouse">
<title>Mouse input</title>
<para>
  AGI games (at least in the IBM-PC) were not designed to accept mouse
  input. All game interaction is done through the keyboard. However, a
  few functions would clearly benefit from mouse (or other pointing
  device) input: the menus, dialog boxes and even a ``click to walk''
  interface could be implemented. Mouse input is currently not supported
  in Sarien, but it can be eventually be added. It's important not to
  block this possibility when implementing the keyboard input system.
</para>
</sect1>

<sect1 id="input-grafitti">
<title>Grafitti input</title>
<para>
  If mouse handling was not in the original AGI design, Grafitti input
  was not in the original Sarien design. While designed with portability
  in mind, Sarien's target environment was always a desktop computer.
  Handheld devices are a completely different universe, with extremely
  limited memory and storage resources and no keyboard. If we want to
  port Sarien to handhelds, it's important to consider Grafitti and
  other handwritten input systems as alternatives when designing the
  keyboard input system. For instance, how function keys should be
  handled?
</para>

</sect1>

</chapter>

<chapter id="gfx">
<title>Graphic subsystem</title>

<sect1 id="gfx-overview">
<title>Graphic subsystem overview</title>
<para>
  In most platforms, Sarien draws on an internal buffer of 320x200
  pixels<footnote><para/On Palm devices, this buffer is 160x200./</footnote>. 
  Image scaling and aspect ratio correction are handled by each of
  the drivers in order to take advantage of hardware acceleration or
  optimized routines provided by the underlying system.<footnote><para>This
  buffer may be extended to 640x480 in Sarien 2.0 to use high resolution
  pictures and 80-columns console.</para></footnote> The number
  of colors is limited to 16 regular colors and 16 ``transparent''
  colors for the interpreter console. Sarien 1.0 drivers don't support
  pallete changes after the graphics subsystem has been initialized.
</para>
</sect1>

<sect1 id="gfx-lowlevel">
<title>Lowlevel graphic subsystem</title>
<para>
</para>
</sect1>

<sect1 id="gfx-hilevel">
<title>High-level graphic subsystem</title>
<para>
</para>
</sect1>

<sect1 id="gfx-fonts">
<title>Fonts</title>
<para>
</para>
</sect1>

<sect1 id="gfx-msgbox">
<title>Windowing</title>
<para>
</para>
</sect1>

<sect1 id="gfx-sprite">
<title>Sprite management</title>

<sect2 id="gfx-reposition">
<title>Repositioning sprites</title>
<para>

</para>

  <figure id="fig-reposition" float="1">
    <title>Sprite reposition algorithm</title>
    <graphic fileref="images/hg/reposition.eps" format="eps">
  </figure>


</sect2>

</sect1>

</chapter>


<chapter id="sound">
<title>Sound subsystem</title>

<sect1 id="sound-play">
<title>Sound playing</title>
<para>
</para>
</sect1>

<sect1 id="sound-iigs">
<title>PCM and MIDI sound</title>
<para>
</para>
</sect1>

</chapter>


<chapter id="driver">
<title>Drivers</title>

<sect1 id="driver-intro">
<title>The need of abstraction layers</title>
<para>
</para>
</sect1>

<sect1 id="driver-graphics">
<title>Graphic drivers</title>
<para>
</para>
</sect1>

<sect1 id="driver-sound">
<title>Sound drivers</title>
<para>
</para>
</sect1>

<sect1 id="driver-fs">
<title>Filesystem access</title>
<para>
</para>
</sect1>

</chapter>

</book>
